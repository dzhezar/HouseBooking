{% extends 'base.html.twig' %}

{% block body %}
    <div class="container" style="padding-top: 100px;">
        <h1>Add hotel</h1>
        <div class="col-6">
            {{ form_start(form) }}
            {{ form_row(form.name,
                { attr:
                    {class: 'form-control'}})}}
            {{ form_row(form.category,
                { attr:
                    {class: 'form-control'}})}}
            {{ form_row(form.capacity,
                { attr:
                    {class: 'form-control'}})}}
            {{ form_row(form.description,
                { attr:
                    {class: 'form-control'}})}}
            {{ form_row(form.price,
                { attr:
                    {class: 'form-control'}})}}
            {{ form_row(form.pacInput,
                { attr:
                    {class: 'form-control'}})}}
            {{ form_row(form.info,
                { attr:
                    {class: 'form-control'}})}}
            {{ form_row(form.images) }}
            <button type="submit" class="btn btn-primary">Checkout</button>

            {{ form_end(form) }}
        </div>
        <div style="padding-bottom: 20px; padding-top: 20px">
            <div id="mapCanvas"></div>
            <div id="infoPanel">
                <div id="markerStatus"></div>
                <div id="info"></div>
                <input type="hidden" id="address">
            </div>
        </div>


    </div>
{% endblock %}
{% block javascripts %}
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB8gROgli9JUpM85XaFCC7zRoYoPRKMkls&libraries=places&callback=initAutocomplete&?sensor=false"
            async defer></script>
    <script>

        var geocoder;

        function geocodePosition(pos) {
            geocoder = new google.maps.Geocoder();
            geocoder.geocode({
                latLng: pos
            }, function(responses) {
                if (responses && responses.length > 0) {
                    updateMarkerAddress(responses[0].formatted_address);
                } else {
                    updateMarkerAddress('Cannot determine address at this location.');
                }
            });
        }

        function updateMarkerStatus(str) {
            document.getElementById('markerStatus').value= str;
        }

        function updateMarkerPosition(latLng) {
            document.getElementById('add_hotel_form_info').value = [
                latLng.lat(),
                latLng.lng()
            ].join(', ');
        }

        function updateMarkerAddress(str) {
            document.getElementById('add_hotel_form_pacInput').value = str;
        }

        function initAutocomplete() {
            var latLng = new google.maps.LatLng(50.4359839, 30.507883200000038);
            var map = new google.maps.Map(document.getElementById('mapCanvas'), {
                zoom: 10,
                center: latLng,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            });

            // Create the search box and link it to the UI element.
            var input = document.getElementById('add_hotel_form_pacInput');
            var searchBox = new google.maps.places.SearchBox(input);

            // Bias the SearchBox results towards current map's viewport.
            map.addListener('bounds_changed', function() {
                searchBox.setBounds(map.getBounds());
            });

            // Listen for the event fired when the user selects a prediction and retrieve
            // more details for that place.
            searchBox.addListener('places_changed', function() {
                var places = searchBox.getPlaces();

                if (places.length == 0) {
                    return;
                }


                // For each place, get the icon, name and location.
                var bounds = new google.maps.LatLngBounds();
                places.forEach(function(place) {
                    if (!place.geometry) {
                        console.log("Returned place contains no geometry");
                        return;
                    }
                    var icon = {
                        url: place.icon,
                        size: new google.maps.Size(71, 71),
                        origin: new google.maps.Point(0, 0),
                        anchor: new google.maps.Point(17, 34),
                        scaledSize: new google.maps.Size(25, 25)
                    };
                    if (marker != null) {
                        marker.setMap(null);
                    }
                    // Create a marker for each place.
                    var marker = new google.maps.Marker({
                        map: map,
                        icon: icon,
                        title: place.name,
                        position: place.geometry.location,
                        draggable: true
                    });

                    updateMarkerPosition(place.geometry.location);
                    geocodePosition(place.geometry.location);

                    google.maps.event.addListener(marker, 'dragstart', function() {
                        updateMarkerAddress('Dragging...');
                    });

                    google.maps.event.addListener(marker, 'drag', function() {
                        updateMarkerStatus('Dragging...');
                        updateMarkerPosition(marker.getPosition());
                    });

                    google.maps.event.addListener(marker, 'dragend', function() {
                        updateMarkerStatus('Drag ended');
                        geocodePosition(marker.getPosition());
                    });

                    console.log(marker.getPosition());
                    console.log(marker.getPosition().lng());

                    if (place.geometry.viewport) {
                        // Only geocodes have viewport.
                        bounds.union(place.geometry.viewport);
                    } else {
                        bounds.extend(place.geometry.location);
                    }

                });

                map.fitBounds(bounds);
            });
        }
    </script>
{% endblock %}


